#!/usr/bin/perl

use strict;
use warnings;
use Bio::Phylo::IO; 
use Bio::Phylo::Matrices;
use Bio::Phylo::Matrices::Matrix;
use Bio::Phylo::Factory;
use Bio::Tree::Tree;
use Bio::Tree::TreeFunctionsI;
use Bio::TreeIO; #onnly eats rooted trees
use Getopt::Long;

###This part should be built into Dollo.pl!!!!!!!!!!!!!
## Takes the output of mapDollo.pl and converts the number of inferred gene duplications and losses per branch into a matrix of nodes x cluster with each cell containing dup/loss rates (branch-length normalized). 

my $infile = "dolloout_red";
my $clustno = 140137;
my %HoH = ();
################# Parsing species tree and input NEXUS file ##################
#my $SpeciesTree = Bio::Phylo::IO->parse(
#   -file => "$SpeciesTreeFile",
#   -format => 'newick'
#)->first;				

my %hash = ( # matrix containing the numbers of nodes and corresponding branch lengths of the organismal phylogenetic tree
"3" => "0.0000001",
"4" => "0.08015675819036691",
"5" => "0.47207551476607307",
"6" => "0.7114216595656305",
"7" => "0.08015675819036691",
"8" => "0.21942007643729483",
"9" => "0.2706697400617613",
"10" => "0.06601433516022893",
"11" => "0.346800505467771",
"12" => "0.30820339485655",
"13" => "0.1647775969576248",
"14" => "0.22476376375181448",
"15" => "0.2382184432138976",
"16" => "0.832250428509732",
"17" => "0.17411237320773865",
"18" => "0.13875299593602222",
"19" => "0.5050285253761662",
"20" => "0.5777838365557203",
"21" => "0.03827637645695125",
"22" => "0.2731740022022362",
"23" => "0.5208288019039795",
"24" => "0.3416311516147729",
"25" => "0.045201650857458475",
"26" => "0.7165084182328879",
"27" => "0.06404332454804579",
"28" => "0.40944554519729975",
"29" => "0.23402889265626556",
"30" => "0.24201548229883815",
"31" => "0.10749089488064312",
"32" => "0.34199772628153974",
"33" => "0.11090792059735194",
"34" => "0.04590819484763402",
"35" => "0.06064016402794304",
"36" => "0.06815499907812182",
"37" => "0.06740858025971336",
"38" => "0.029440307808732486",
"39" => "0.035202572405497005",
"40" => "0.2549200702871239",
"41" => "0.3629829409886227",
"42" => "0.3625384889843689",
"43" => "0.03435358416777809",
"44" => "0.30687957631447954",
"45" => "0.15195934294820782",
"46" => "0.15849006526288828",
"47" => "0.031097671284958953",
"48" => "0.27713598775399817",
"49" => "0.11586686418772622",
"50" => "0.11674859649816935",
"51" => "0.032773966017691475",
"52" => "0.03358601939107522",
"53" => "0.3073486596054548",
"54" => "0.002791538683150189",
"55" => "0.002447982270765389",
"56" => "0.2999738969627882",
"57" => "0.0517949182751892",
"58" => "0.2873932058350302",
"59" => "0.04994356591734622",
"60" => "0.03462847464819408",
"61" => "0.06763791769901525",
"62" => "0.16180469097884867",
"63" => "0.13316410999974798",
"64" => "0.2970505040290724",
"65" => "0.019084159504124218",
"66" => "0.014552882782037174",
"67" => "0.01773479025606173",
"68" => "0.2441652220929071",
"69" => "0.04649983446239802",
"70" => "0.09835782430660794",
"71" => "0.08057669426916245",
"72" => "0.06635286303914015",
"73" => "0.1501360511211627",
"74" => "0.0545355671400203",
"75" => "0.05834797330163708",
"76" => "0.14271634450286913",
"77" => "0.046566004344678565",
"78" => "0.1111477679743827",
"79" => "0.12002190195615377",
"80" => "0.02549491288905512",
"81" => "0.08994002131741903",
"82" => "0.09357317103630798",
"83" => "0.09414360362839085",
"84" => "0.04809190084961213",
"85" => "0.08145856394358464",
"86" => "0.05336582772942279",
"87" => "0.06382420318886711",
"88" => "0.012265751931926867",
"89" => "0.12368651254047455",
"90" => "0.013824185094480945",
"91" => "0.10817076149707827",
"92" => "0.11262458972429636",
"93" => "0.031168601641517944",
"94" => "0.018947027132451836",
"95" => "0.02022721610875999",
"96" => "0.16355382960900627",
"97" => "0.070014341849981",
"98" => "0.14683165086385006",
"99" => "0.09215851118668454",
"100" => "0.054053768627313516",
"101" => "0.13568545891134498",
"102" => "0.029707468926013614",
"103" => "0.21051793625851925",
"104" => "0.06450537252095781",
"105" => "0.15443216305232743",
"106" => "0.034507322430968816",
"107" => "0.05654547370183442",
"108" => "0.07822442164475862",
"109" => "0.03872093489521871",
"110" => "0.20340735738893367",
"111" => "0.017902208013529458",
"112" => "0.023801701691332007",
"113" => "0.28251488487521254",
"114" => "0.03473333112542507",
"115" => "0.2979812947698862",
"116" => "0.19876457483170998",
"117" => "0.026381957069526608",
"118" => "0.03275634520760842",
"119" => "0.20918033762806684",
"120" => "0.02448809558081756",
"121" => "0.0731350067273429",
"122" => "0.09314754330473288",
"123" => "0.08589687692115326",
"124" => "0.12755939478039718",
"125" => "0.23258766804000403");


my @Allines = ();
open INFILE, $infile || die "$!";
	while (<INFILE>) {
		chomp;
		push (@Allines, $_);
	}
	close INFILE;
for my $i (1 .. $clustno) {
	my @arr = ("Cluster", "$i");
	my $prefix = ();
	foreach (@Allines) { 
		my @Line = split(' ',$_);
		my $NodeNo = $Line[2];
		if ($Line[0] =~ /GAIN/) {
				$prefix = "Gain";
			} else {
				$prefix = "Loss";
			}
		push (@arr, $prefix);
	#	for my $i (1 .. $clustno) { #for each cluster
			my $counter = 0;
			foreach (@Line) { #foreach nodes
				if ($_ =~ /\//) {
					if ($_ =~ /^$i\//) { #ha az a cluster szerepel benne 
						$counter++;
					}
				}
			}
#			print "$NodeNo\n";
			my $rate = $counter / $hash{$NodeNo};
			push(@arr, "Node", $NodeNo, $rate);
#			print "$Line[0]\tNode$NodeNo\tCluster$i\t$counter\n";
	#	}
	}
	my $newarr = join("\t",@arr);
	print "$newarr\n";
}


